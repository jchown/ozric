@using OzricEngine.nodes
<MudDialog>
    <DialogContent>
        
        <MudChipSet @bind-SelectedChips="SelectedCategoryChips" MultiSelection="true">
            <MudChip Text="Sensor" Value="Category.MotionSensor" Default="true"></MudChip>
            <MudChip Text="Light" Value="Category.Light" Default="true"></MudChip>
            <MudChip Text="Logic" Value="Category.Logic" Default="true"></MudChip>
        </MudChipSet>

        <MudAutocomplete T="string" Label="Search" @bind-Value="Search" SearchFunc="@DoSearch"
                         ResetValueOnEmptyText="true"
                         CoerceText="true" CoerceValue="true"/>

        <MudContainer Style="max-height: 60vh; overflow-y: scroll">

            @foreach (var choice in Choices.Where(choice => IsVisible(choice)))
            {
                <div>
                    <MudButton Icon="@choice.Icon" Label="@choice.Name" />
                </div>
            }

        </MudContainer>

    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>
    
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public List<AddNodeChoice> Choices { get; set; } = new();

    private List<Category> SelectedCategories { get; set; } = new();

    private string Search { get; set; } = "";

    private bool ShowMotionSensors => SelectedCategories.Contains(Category.MotionSensor);
    private bool ShowLights => SelectedCategories.Contains(Category.Light);
    private bool ShowLogic => SelectedCategories.Contains(Category.Logic);

    private MudChip[] SelectedCategoryChips = new MudChip[0];

    void Cancel() => MudDialog.Cancel();

    private async Task<IEnumerable<string>> DoSearch(string arg)
    {
        return new List<string>();
    }

    private bool IsVisible(AddNodeChoice choice)
    {
        if (!string.IsNullOrWhiteSpace(Search))
        {
            var terms = Search.Split(" ", StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
            if (!terms.All(term => choice.Name.Contains(term)))
                return false;
        }
                
        switch (choice.Category)
        {
            case Category.Light:
                return ShowLights;

            case Category.MotionSensor:
                return ShowMotionSensors;
                
            case Category.Logic:
                return ShowLogic;
        }
        
        throw new ArgumentOutOfRangeException();
    }

    private void OnSelectionChanged()
    {
        SelectedCategories = SelectedCategoryChips.Select(chip => (Category)chip.Value).ToList();
        StateHasChanged();
    }
}
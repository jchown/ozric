@using OzricEngine.nodes
@using OzricUI.Model
@using OzricEngine.logic

<MudDialog>
    <DialogContent>

    <MudChipSet Filter="true" SelectedChipsChanged="OnSelectionChanged" Mandatory="true" >
            
        <MudChip Text="All" Default="true"></MudChip>
        <MudChip Text="Sensors" Value="Category.Sensor" />
        <MudChip Text="Lights" Value="Category.Light"  />
        <MudChip Text="Switches" Value="Category.Switch" />
        <MudChip Text="Logic" Value="Category.Logic" />
        <MudChip Text="Constant" Value="Category.Constant" />

    </MudChipSet>

    <MudAutocomplete T="string" Label="Search" @bind-Value="Search" SearchFunc="@DoSearch"
                     ResetValueOnEmptyText="true"
                     CoerceText="true" CoerceValue="true"/>

        <MudContainer Style="max-height: 60vh; overflow-y: scroll">

            @foreach (var choice in Choices)
            {
                if (IsVisible(choice))
                {
                    <div class="d-block py-1">
                        <MudButton Variant="Variant.Filled" OnClick="@(_ => SelectedChoice(choice))">
                            <span class="iconify" data-icon="@choice.Icon"/>
                            <span class="px-2">@choice.Name</span>
                        </MudButton>
                    </div>
                }
            }

        </MudContainer>

    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>

</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public List<AddNodeChoice> Choices { get; set; } = new();

    [Parameter]
    public Action<Node> OnAdd { get; set; }
    
    private List<Category> SelectedCategories { get; set; } = new();

    private string Search { get; set; } = "";

    private bool ShowSensors => SelectedCategories.Contains(Category.Sensor);
    private bool ShowLights => SelectedCategories.Contains(Category.Light);
    private bool ShowSwitches => SelectedCategories.Contains(Category.Switch);
    private bool ShowLogic => SelectedCategories.Contains(Category.Logic);
    private bool ShowConstants => SelectedCategories.Contains(Category.Constant);

    void Cancel() => MudDialog.Cancel();

    private Task<IEnumerable<string>> DoSearch(string arg)
    {
        return Task.FromResult<IEnumerable<string>>(new List<string>());
    }

    private bool IsVisible(AddNodeChoice choice)
    {
        if (!string.IsNullOrWhiteSpace(Search))
        {
            var terms = Search.Split(" ", StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
            if (!terms.All(term => choice.Name.Contains(term)))
                return false;
        }

        switch (choice.Category)
        {
            case Category.Light:
                return ShowLights;

            case Category.Switch:
                return ShowSwitches;

            case Category.Sensor:
                return ShowSensors;

            case Category.Logic:
                return ShowLogic;

            case Category.Constant:
                return ShowConstants;
        }

        throw new ArgumentOutOfRangeException();
    }

    private void OnSelectionChanged(MudChip[] selection)
    {
        if (selection[0].Value is MudChip)            //  "All" doesn't have a Category enum value 
        {
            SelectedCategories = new() { Category.Light, Category.Logic, Category.Sensor, Category.Switch, Category.Constant };
        }
        else
        {
            SelectedCategories = new() { (Category) (selection[0].Value) };
        }
        
        StateHasChanged();
    }

    private void SelectedChoice(AddNodeChoice choice)
    {
        OnAdd.Invoke(choice.Create());
        if (choice.Once)
            Choices.Remove(choice);
    }
}
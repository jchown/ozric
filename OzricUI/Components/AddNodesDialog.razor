@using OzricEngine.Nodes

<MudDialog>
    <DialogContent>

        <MudChipSet Filter="true" SelectedChipsChanged="OnSelectionChanged" Mandatory="true" >
                
            <MudChip Text="All" Default="true"></MudChip>
            <MudChip Text="Environment" Value="Category.Environment" />
            <MudChip Text="Sensors" Value="Category.Sensor" />
            <MudChip Text="Modes" Value="Category.ModeSensor" />
            <MudChip Text="Lights" Value="Category.Light"  />
            <MudChip Text="Switches" Value="Category.Switch" />
            <MudChip Text="Media Players" Value="Category.MediaPlayer"  />
            <MudChip Text="Logic" Value="Category.Logic" />
            <MudChip Text="Constant" Value="Category.Constant" />
            <MudChip Text="People" Value="Category.Person" />

        </MudChipSet>

        <MudAutocomplete T="string" Label="Search" @bind-Value="Search" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true"/>

        <MudContainer Style="max-height: 60vh; overflow-y: scroll">

            @foreach (var choice in Choices)
            {
                <div class="py-1" style="@ChoiceStyle(choice)">
                    <MudButton Variant="Variant.Filled" OnClick="@(_ => OnChoiceSelected(choice))">
                        <span class="iconify" data-icon="@choice.Icon"/>
                        <span class="px-2">@choice.Name</span>
                    </MudButton>
                </div>
            }

        </MudContainer>

    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>

</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public List<AddNodeChoice> Choices { get; set; } = new();

    [Parameter]
    public Action<Node> OnAdd { get; set; }
    
    private List<Category> SelectedCategories { get; set; } = new();

    private string Search { get; set; } = "";

    void Cancel() => MudDialog.Cancel();

    private bool IsVisible(AddNodeChoice choice)
    {
        if (!string.IsNullOrWhiteSpace(Search))
        {
            var terms = Search.Split(" ", StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
            if (!terms.All(term => choice.Name.Contains(term, StringComparison.OrdinalIgnoreCase)))
                return false;
        }

        return SelectedCategories.Contains(choice.Category);
    }

    private void OnSelectionChanged(MudChip[] selection)
    {
        if (selection[0].Value is MudChip)            //  "All" doesn't have a Category enum value 
        {
            SelectedCategories = new(Enum.GetValues<Category>());
        }
        else
        {
            SelectedCategories = new(){ (Category) selection[0].Value };
        }
        
        StateHasChanged();
    }

    private void OnChoiceSelected(AddNodeChoice choice)
    {
        OnAdd.Invoke(choice.Create());
        if (choice.Once)
            Choices.Remove(choice);
    }

    private object ChoiceStyle(AddNodeChoice choice)
    {
        if (!IsVisible(choice))
            return "display: none";

        return "";
    }
}
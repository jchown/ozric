@using OzricUI.Model
@using OzricEngine.logic
@using MudBlazor.Utilities

<MudDialog>
    <DialogContent>

        <MudContainer Style="max-height: 60vh; overflow-y: scroll;">

            <MudTextField Label="Title" HelperText="The unique name for this node" @bind-Value="_id" For="@(() => _id)" Immediate="true"/>

            <MudDivider DividerType="DividerType.Middle" Class="my-4"/>

            <MudSelect @bind-Value="_colorMode" Style="z-index:9999;" @onchange="OnColorTypeChanged" HelperText="Matching colorspace modes with your lights can ensure accurate color reproduction" T="ColorMode" Label="Color Mode" Variant="Variant.Text">
                @foreach(var e in Enum.GetValues(typeof(ColorMode)))
                {
                    var colorMode = (ColorMode)e; 
                    <MudSelectItem Value="@(colorMode)">@ColorValue.DescribeColorType(colorMode)</MudSelectItem>
                }
            </MudSelect>

            <MudStack Row="true">
                <MudPaper Class="pa-3">
                    @switch (_colorMode)
                    {
                        case ColorMode.HS:
                            <MudSlider @bind-Value="_h" Max="100" @onchange="_ => OnColorChanged()">Hue: @_h.ToString()</MudSlider>
                            <MudSlider @bind-Value="_s" Max="100" @onchange="_ => OnColorChanged()">Saturation: @_s.ToString()</MudSlider>
                            break;
                        case ColorMode.Temp:
                            <MudSlider Value="@_temp" Max="100">Temperature: @_temp.ToString()</MudSlider>
                            break;
                        case ColorMode.RGB:
                            <MudSlider Value="@_r" Max="100">Red: @_r.ToString()</MudSlider>
                            <MudSlider Value="@_g" Max="100">Green: @_g.ToString()</MudSlider>
                            <MudSlider Value="@_b" Max="100">Blue: @_b.ToString()</MudSlider>
                            break;
                        case ColorMode.XY:
                            <MudSlider Value="@_x" Max="100">X: @_x.ToString()</MudSlider>
                            <MudSlider Value="@_y" Max="100">Y: @_y.ToString()</MudSlider>
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                </MudPaper>
                
                <MudPaper Class="pa-3"> 
                    <MudColorPicker Label="Color" @bind-Text="_color" Style="@($"color: {_color};")" Placeholder="Select Color" PickerVariant="PickerVariant.Static" 
                                    DisableToolbar="true" DisableAlpha="true" DisableModeSwitch="true" DisableInputs="true" 
                                    ValueChanged="OnColorPickerChanged"/>
                </MudPaper>
                
            </MudStack>

            <MudSlider @bind-Value="_brightness" Min="0" Max="HS_SCALE">Brightness: @_brightness.ToString()</MudSlider>

        </MudContainer>

    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Save" Disabled="!HasChanges">Save</MudButton>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>

</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public ColorConstantModel Model { get; set; }

    [Parameter]
    public Constant Node { get; set; }

    private string _id;
    private string _color;
    private ColorMode _colorMode;
    private string ColorTypeText => ColorValue.DescribeColorType(_colorMode);
    
    private const int HS_SCALE = 100;
    private int _h { get; set; }
    private int _s { get; set; }
    
    private int _temp;
    private float _r, _g, _b;
    private float _x, _y;
    private float _brightness { get; set; }

    void Cancel() => MudDialog.Cancel();
    void Save() => MudDialog.Close(DialogResult.Ok(GetChanges()));

    private bool HasChanges => GetChanges().Count > 0;

    protected override void OnInitialized()
    {
        var colorValue = (ColorValue) Node.value;

        _id = Node.id;
        SetColorSliders(colorValue);
        _brightness = colorValue.brightness;
    }

    private void SetColorSliders(ColorValue colorValue)
    {
        _color = colorValue.ToHexString();
        switch (colorValue)
        {
            case ColorRGB rgb:
            {
                _r = rgb.r;
                _g = rgb.g;
                _b = rgb.b;
                break;
            }
            case ColorHS hs:
            {
                _h = (int)(hs.h * HS_SCALE);
                _s = (int)(hs.s * HS_SCALE);
                break;
            }
            case ColorXY xy:
            {
                _x = xy.x;
                _y = xy.y;
                break;
            }
            case ColorTemp temp:
            {
                _temp = temp.temp;
                break;
            }
            default:
            {
                throw new ArgumentOutOfRangeException();
            }
        }
    }

    private ColorValue GetColorSliders()
    {
        ColorValue value;
        
        switch (_colorMode)
        {
            case ColorMode.HS:
            {
                value = new ColorHS(_h / HS_SCALE, _s / HS_SCALE, _brightness);
                break;
            }
            case ColorMode.Temp:
            {
                value = new ColorTemp(_temp, _brightness);
                break;
            }
            case ColorMode.RGB:
            {
                value = new ColorRGB(_r, _g, _b, _brightness);
                break;
            }
            case ColorMode.XY:
            {
                value = new ColorXY(_x, _y, _brightness);
                break;
            }
            default:
            {
                throw new ArgumentOutOfRangeException();
            }
        }

        value.brightness = _brightness;
        return value;
    }


    private List<GraphAction> GetChanges()
    {
        var changes = new List<GraphAction>();
        if (_id != Node.id)
            changes.Add(new GraphAction.RenameNode(Node, _id));

        var value = GetColorSliders();
        if (value != Node.value)
            changes.Add(new GraphAction.EditNode(Node, Node.GetProperty(nameof(Node.value)), value));

        return changes;
    }

    private void OnColorChanged()
    {
        var value = GetColorSliders();
        _color = value.ToHexString();
    }

    private void OnColorTypeChanged()
    {
    }

    private void OnColorPickerChanged(MudColor obj)
    {
        ColorValue value;
        
        switch (_colorMode)
        {
            case ColorMode.HS:
            {
                value = new ColorHS((float)obj.H / 360f, (float)obj.S, _brightness);
                break;
            }
            /*
            case ColorMode.Temp:
            {
                break;
            }
            */
            case ColorMode.RGB:
            {
                value = new ColorRGB(obj.R / 255f, obj.G / 255f, obj.B / 255f, _brightness); 
                break;
            }
            /*
            case ColorMode.XY:
            {
                break;
            }
            */
            default:
            {
                throw new ArgumentOutOfRangeException();
            }
        }
        
        SetColorSliders(value);
    }
}
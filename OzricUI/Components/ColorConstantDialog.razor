@using OzricUI.Model
@using OzricEngine.logic
@using MudBlazor.Utilities

<MudDialog>
    <DialogContent>

        <MudContainer Style="max-height: 60vh; overflow-y: scroll;">

            <MudTextField Label="Title" HelperText="The unique name for this node" @bind-Value="_id" For="@(() => _id)" Immediate="true"/>

            <MudDivider DividerType="DividerType.Middle" Class="my-4"/>

            <MudSelect Value="_colorMode" Style="z-index:9999;" ValueChanged="OnColorModeChanged" HelperText="Matching colorspace modes with your lights can ensure accurate color reproduction" T="ColorMode" Label="Color Mode" Variant="Variant.Text">
                @foreach (var e in Enum.GetValues(typeof(ColorMode)))
                {
                    var colorMode = (ColorMode)e;
                    <MudSelectItem Value="@(colorMode)">@ColorValue.DescribeColorMode(colorMode)</MudSelectItem>
                }
            </MudSelect>

            <MudDivider DividerType="DividerType.Middle" Class="my-4"/>

            <MudGrid>
                <MudItem xs="6">
                    @switch (_colorMode)
                    {
                        case ColorMode.HS:
                            <MudSlider @bind-Value="_h" Max="H_SCALE" Immediate="true" @onchange="OnColorSlidersChanged">Hue: @_h.ToString()</MudSlider>
                            <MudSlider @bind-Value="_s" Max="S_SCALE" Immediate="true" @onchange="OnColorSlidersChanged">Saturation: @_s.ToString()</MudSlider>
                            break;
                        case ColorMode.Temp:
                            <MudSlider @bind-Value="@_temp" Max="100" Immediate="true" @onchange="OnColorSlidersChanged">Temperature: @_temp.ToString()</MudSlider>
                            break;
                        case ColorMode.RGB:
                            <MudSlider @bind-Value="_r" Max="RGB_SCALE" Immediate="true" @onchange="OnColorSlidersChanged">Red: @_r.ToString()</MudSlider>
                            <MudSlider @bind-Value="_g" Max="RGB_SCALE" Immediate="true" @onchange="OnColorSlidersChanged">Green: @_g.ToString()</MudSlider>
                            <MudSlider @bind-Value="_b" Max="RGB_SCALE" Immediate="true" @onchange="OnColorSlidersChanged">Blue: @_b.ToString()</MudSlider>
                            break;
                        case ColorMode.XY:
                            <MudSlider @bind-Value="@_x" Max="100" Immediate="true" @onchange="OnColorSlidersChanged">X: @_x.ToString()</MudSlider>
                            <MudSlider @bind-Value="@_y" Max="100" Immediate="true" @onchange="OnColorSlidersChanged">Y: @_y.ToString()</MudSlider>
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }

                    <MudSlider @bind-Value="_brightness" Min="0" Max="BRIGHTNESS_SCALE">Brightness: @_brightness.ToString()</MudSlider>
                </MudItem>

                <MudItem xs="6">
                    <MudColorPicker Label="Color" @bind-Value="_pickerColor" Style="@($"color: {_pickerColor};")" Placeholder="Select Color" PickerVariant="PickerVariant.Static"
                                    DisableToolbar="true" DisableAlpha="true" DisableModeSwitch="true" DisableInputs="true"
                                    TextChanged="OnColorPickerChanged"/>
                </MudItem>

            </MudGrid>

        </MudContainer>

    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Save" Disabled="!HasChanges">Save</MudButton>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>

</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public ColorConstantModel Model { get; set; }

    [Parameter]
    public Constant Node { get; set; }

    private string _id;
    private MudColor _pickerColor { get; set; }
    private ColorMode _colorMode { get; set; }

    private const int H_SCALE = 360;
    private const int S_SCALE = 100;

    private int _h { get; set; }
    private int _s
    {
        get => __s;
        set
        {
            __s = value;
            Console.WriteLine($"S = {__s}");
        }
    }

    private int __s;

    private int _temp { get; set; }

    private const int RGB_SCALE = 255;

    private int _r { get; set; }
    private int _g { get; set; }
    private int _b { get; set; }

    private float _x { get; set; }
    private float _y { get; set; }

    private const int BRIGHTNESS_SCALE = 100;

    private int _brightness { get; set; }

    void Cancel() => MudDialog.Cancel();
    void Save() => MudDialog.Close(DialogResult.Ok(GetChanges()));

    private bool HasChanges => GetChanges().Count > 0;
    private bool _settingSliders;
    private bool _settingPicker;

    protected override void OnInitialized()
    {
        var colorValue = (ColorValue)Node.value;

        _id = Node.id;
        SetColorSliders(colorValue);
        _brightness = (int)(colorValue.brightness * BRIGHTNESS_SCALE);
    }

    private void SetColorSliders(ColorValue colorValue)
    {
        _colorMode = colorValue.ColorMode;
        _pickerColor = colorValue.ToHexString();
        switch (colorValue)
        {
            case ColorRGB rgb:
            {
                _r = (int)(rgb.r * RGB_SCALE);
                _g = (int)(rgb.g * RGB_SCALE);
                _b = (int)(rgb.b * RGB_SCALE);
                break;
            }
            case ColorHS hs:
            {
                _h = (int)(hs.h * H_SCALE);
                _s = (int)(hs.s * S_SCALE);
                break;
            }
            case ColorXY xy:
            {
                _x = xy.x;
                _y = xy.y;
                break;
            }
            case ColorTemp temp:
            {
                _temp = temp.temp;
                break;
            }
            default:
            {
                throw new ArgumentOutOfRangeException();
            }
        }
    }

    private ColorValue GetColorSliders()
    {
        var brightness = _brightness / (float)BRIGHTNESS_SCALE;

        switch (_colorMode)
        {
            case ColorMode.HS:
            {
                return new ColorHS(_h / (float)H_SCALE, _s / (float)S_SCALE, brightness);
            }
            case ColorMode.Temp:
            {
                return new ColorTemp(_temp, brightness);
            }
            case ColorMode.RGB:
            {
                return new ColorRGB(_r / (float)RGB_SCALE, _g / (float)RGB_SCALE, _b / (float)RGB_SCALE, brightness);
            }
            case ColorMode.XY:
            {
                return new ColorXY(_x, _y, brightness);
            }
            default:
            {
                throw new ArgumentOutOfRangeException();
            }
        }
    }

    private List<GraphAction> GetChanges()
    {
        var changes = new List<GraphAction>();
        if (_id != Node.id)
            changes.Add(new GraphAction.RenameNode(Node, _id));

        var value = GetColorSliders();
        if (value != Node.value)
            changes.Add(new GraphAction.EditNode(Node, Node.GetProperty(nameof(Node.value)), value));

        return changes;
    }

    private void OnColorModeChanged(ColorMode mode)
    {
        _colorMode = mode;
        SetColorSliders(_pickerColor);
    }

    private void OnColorSlidersChanged(ChangeEventArgs args)
    {
        Console.WriteLine("OCSC");

        if (!_settingSliders)
        {
            var value = GetColorSliders();
            _settingPicker = true;
            try
            {
                _pickerColor = value.ToHexString();
            }
            finally
            {
                _settingPicker = false;
            }
        }
    }

    private void OnColorPickerChanged(string rgb)
    {
        if (!_settingPicker)
        {
            _settingSliders = true;
            try
            {
                SetColorSliders(new MudColor(rgb));
            }
            finally
            {
                _settingSliders = false;
            }
        }
    }

    private void SetColorSliders(MudColor obj)
    {
        ColorValue value;
        var brightness = _brightness / (float)BRIGHTNESS_SCALE;

        switch (_colorMode)
        {
            case ColorMode.HS:
            {
                value = new ColorHS((float)obj.H / 360f, (float)obj.S, brightness);
                break;
            }
    /*
            case ColorMode.Temp:
            {
                break;
            }
            */
            case ColorMode.RGB:
            {
                value = new ColorRGB(obj.R / 255f, obj.G / 255f, obj.B / 255f, brightness);
                break;
            }
    /*
            case ColorMode.XY:
            {
                break;
            }
            */
            default:
            {
                throw new ArgumentOutOfRangeException();
            }
        }

        SetColorSliders(value);
    }
} 
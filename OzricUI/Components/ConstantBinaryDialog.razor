@using OzricUI.Model
@using OzricEngine.Nodes
@using OzricEngine.Values

<MudDialog>
    <DialogContent>

        <MudContainer Style="max-height: 60vh; overflow-y: scroll;">

            <MudTextField Label="Title" HelperText="The unique name for this node" @bind-Value="_id" For="@(() => _id)" Immediate="true"/>

            <MudDivider DividerType="DividerType.Middle" Class="my-4"/>

            <span>Value</span><span>&NonBreakingSpace;</span> <MudSwitch @bind-Checked="@_value" Color="Color.Primary" /><span>@(_value ? "On/1" : "Off/0")</span>

        </MudContainer>

    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Save" Disabled="!HasChanges">Save</MudButton>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>

</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ConstantBinaryModel Model { get; set; }

    [Parameter]
    public Constant Node { get; set; }

    private string _id { get; set; }
    private bool _value { get; set; }

    void Cancel() => MudDialog.Cancel();
    void Save() => MudDialog.Close(DialogResult.Ok(GetChanges()));

    private bool HasChanges => GetChanges().Count > 0;

    protected override void OnInitialized()
    {
        _id = Node.id;
        _value = ((Binary) Node.value).value;
    }
    
    private List<GraphEditAction> GetChanges()
    {
        var changes = new List<GraphEditAction>();
        if (_id != Node.id)
            changes.Add(new GraphEditAction.RenameNode(Node, _id));

        if (_value != ((Binary) Node.value).value)
            changes.Add(new GraphEditAction.EditNode(Node, Node.GetProperty(nameof(Node.value)), new Binary(_value)));

        return changes;
    }
}

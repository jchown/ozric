@using OzricEngine.logic
@using OzricUI.Model
@using OzricEngine.ext
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Core.Models.Base
@using OzricEngine
@using OzricEngine.nodes
@using _Imports = OzricUI._Imports
@using ValueType = OzricEngine.logic.ValueType
@using Edge = OzricEngine.nodes.Edge
@implements IDisposable

<div class="diagram-container">
    <CascadingValue Value="diagram">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>

@code {

    [Parameter]
    public Graph Graph { get; set; }

    [Parameter]
    public GraphLayout GraphLayout { get; set; }

    [Parameter]
    public GraphEditState GraphEditState { get; set; }

    public Diagram diagram { get; set; } = new();

    private bool IsChanged => !IsNotChanged;
    private bool IsNotChanged => GetHistory().IsAtCheckpoint();
    private bool CanUndo => GraphEditState.IsEditing && (GetHistory().CanUndo());
    private bool CanRedo => GraphEditState.IsEditing && (GetHistory().CanRedo());

    private EditHistory? history;
    private EditHistory GetHistory() => history!;

    private readonly Mapping<Node, GraphNodeModel> nodeMappings = new();
    private readonly Mapping<Edge, LinkModel> edgeMappings = new();

    protected override void OnInitialized()
    {
        GraphEditState.OnChanged += OnGraphEditStateChanged;
        GraphEditState.OnDoCommand += DoCommand;
        GraphEditState.OnDoAction += DoAction;
        
        var options = new DiagramOptions
        {
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            Links = new DiagramLinkOptions
            {
            },
            Zoom = new DiagramZoomOptions
            {
                Minimum = 0.5, // Minimum zoom value
                Inverse = false, // Whether to inverse the direction of the zoom when using the wheel
            }
        };
        
        diagram = new Diagram(options);
        diagram.RegisterModelComponent<SensorModel, GraphNodeComponent>();
        diagram.RegisterModelComponent<SwitchModel, GraphNodeComponent>();
        diagram.RegisterModelComponent<LightModel, GraphNodeComponent>();
        diagram.RegisterModelComponent<IfAnyModel, GraphNodeComponent>();
        diagram.RegisterModelComponent<DayPhasesModel, GraphNodeComponent>();
        diagram.RegisterModelComponent<BooleanChoiceModel, GraphNodeComponent>();
        diagram.RegisterModelComponent<ModeSwitchModel, GraphNodeComponent>();
        diagram.RegisterModelComponent<ColorConstantModel, GraphNodeComponent>();
        diagram.SelectionChanged += OnSelectionChanged;
        diagram.Nodes.Removed += OnNodeRemoved;
        diagram.Links.Added += OnDiagramLinkAdded;
        diagram.KeyDown += GraphEditState.KeyDown;

        PopulateDiagram();

        history = new EditHistory(this);
        UpdateLockedState();
    }

    private void DoCommand(GraphEditState.Command command)
    {
        switch (command)
        {
            case GraphEditState.Command.Undo:
                GetHistory().UndoLastAction();
                OnHistoryChanged();
                break;
                
            case GraphEditState.Command.Redo:
                GetHistory().RedoLastAction();
                OnHistoryChanged();
                break;
                
            case GraphEditState.Command.SetCheckpoint:
                GetHistory().SetCheckpoint();
                OnHistoryChanged();
                break;
                
            case GraphEditState.Command.Delete:
                DoDelete();
                break;
                
            default:
                throw new ArgumentOutOfRangeException(nameof(command), command, null);
        }
    }

    /// Callback for when the diagram removes a node (user hits delete key)
    
    private void OnNodeRemoved(NodeModel nodeModel)
    {
        var node = nodeMappings.GetGraph((GraphNodeModel) nodeModel);
        GetHistory().Do(new GraphEditAction.RemoveNode(node));
        OnHistoryChanged();
        OnSelectionChanged(null);
    }

    public void Dispose()
    {
        GraphEditState.OnChanged -= OnGraphEditStateChanged;
    }

    private void OnGraphEditStateChanged()
    {
        StateHasChanged();
        UpdateLockedState();
    }

    private void UpdateLockedState()
    {
        SetLocked(GraphEditState.IsLocked());
    }
    
    private void SetLocked(bool locked)
    {
        foreach (var node in diagram.Nodes)
        {
            node.Locked = locked;

            foreach (var port in node.Ports)
                port.Locked = locked;
        }

        foreach (var link in diagram.Nodes)
            link.Locked = locked;
    }

    private void OnDoUndo()
    {
        GetHistory().UndoLastAction();
        OnHistoryChanged();
    }

    private void OnDoRedo()
    {
        GetHistory().RedoLastAction();
        OnHistoryChanged();
    }

    private void OnDoSetCheckpoint()
    {
        GetHistory().SetCheckpoint();
        OnHistoryChanged();
    }
    
    private void DoAction(GraphEditAction editAction)
    {
        GetHistory().Do(editAction);
        OnHistoryChanged();
    }

    private void PopulateDiagram()
    {
        nodeMappings.Clear();
        edgeMappings.Clear();

        double minX = 0, minY = 0;
        int x = 0, y = 0, w = 160, h = 120, cols = 6; 
        
        foreach (var node in Graph.nodes.Values)
        {
            var position = GraphLayout.nodeLayout.GetOrSet(node.id, () =>
            {
                var point = new LayoutPoint(x * w, y * h);
                if (++x == cols)
                {
                    x = 0;
                    ++y;
                }
                return point;
            }).ToPoint();

            minX = Math.Min(minX, position.X);
            minY = Math.Min(minY, position.Y);

            AddNode(node, position);
        }

        diagram.SetPan(-(minX - 10), -(minY - 10));

        foreach (var edge in Graph.edges.Values)
        {
            var fromD = nodeMappings.GetDiagram(edge.from.nodeID);
            var fromPortID = $"{edge.from.nodeID}.{edge.from.outputName}"; 
            
            var toD = nodeMappings.GetDiagram(edge.to.nodeID);
            var toPortID = $"{edge.to.nodeID}.{edge.to.inputName}";

            var link = new LinkModel(fromD.GetPort(fromPortID), toD.GetPort(toPortID))
            {
                Locked = !GraphEditState.IsEditing
            };

            edgeMappings.Add(edge, link);
            diagram.Links.Add(link);
        }
    }
    
    /// Take an existing node in the Graph and add it as the equivalent model object in the Diagram.
    /// The caller is expected to have added it to the DiagramLayout

    public void AddNode(Node node, Point position)
    {
        var diagramNode = NewNode(node, position);

        nodeMappings.Add(node, diagramNode);
        diagram.Nodes.Add(diagramNode);

        var expectedPortCount = node.inputs.Count + node.outputs.Count;
        if (diagramNode.Ports.Count != expectedPortCount)
        {
            throw new Exception($"Graph Node {diagramNode} has {diagramNode.Ports.Count} ports but expected {expectedPortCount}");
        }

        for (int i = 0; i < node.inputs.Count; i++)
        {
            diagramNode.Ports[i].Position = position.Add(0f, i * 20f);
        }
    }

    /// Remove the model object that represents the given node in the Graph from the Diagram

    public void RemoveNode(Node node)
    {
        var diagramNode = nodeMappings.Remove(node);
        if (diagram.Nodes.Contains(diagramNode))
            diagram.Nodes.Remove(diagramNode);
        Graph.RemoveNode(node);
    }

    /// Take an existing edge in the Graph and add it as the equivalent model object in the Diagram.

    public void AddEdge(Edge edge)
    {
        var fromNodeModel = nodeMappings.GetDiagram(edge.from.nodeID);
        var toNodeModel = nodeMappings.GetDiagram(edge.to.nodeID);
        var fromPort = fromNodeModel.GetPort(edge.from.id);
        var toPort = toNodeModel.GetPort(edge.to.id);
        
        var link = new LinkModel(fromPort, toPort);

        edgeMappings.Add(edge, link);
        diagram.Links.Add(link);
    }
    
    /// Remove the model object that represents the given edge from the Diagram 
    
    public void RemoveEdge(Edge edge)
    {
        var link = edgeMappings.Remove(edge);
        
        if (diagram.Links.Contains(link))
            diagram.Links.Remove(link);

        Graph.RemoveEdge(edge);
    }

    private GraphNodeModel NewNode(Node node, Point? point = null)
    {
        GraphNodeModel model;
        switch (node)
        {
            case Light l:
            {
                model = new LightModel(l, point);
                break;
            }
            case Sensor s:
            {
                model = new SensorModel(s, point);
                break;
            }
            case BooleanChoice s:
            {
                model = new BooleanChoiceModel(s, point);
                break;
            }
            case ModeSwitch ms:
            {
                model = new ModeSwitchModel(ms, point);
                break;
            }
            case IfAny ia:
            {
                model = new IfAnyModel(ia, point);
                break;
            }
            case DayPhases dp:
            {
                model = new DayPhasesModel(dp, point);
                break;
            }
            case Switch sw:
            {
                model = new SwitchModel(sw, point);
                break;
            }
            case Constant c:
            {
                switch (c.value.ValueType)
                {
                    case ValueType.Color:
                    {
                        model = new ColorConstantModel(c, point);
                        break;
                    }
                    case ValueType.Boolean:
                    case ValueType.Scalar:
                    case ValueType.Mode:
                    default:
                        throw new ArgumentOutOfRangeException();
                }
                break;
            }
            default:
            {
                throw new Exception($"Unhandled type {node.GetType()}");
            }
        }
        model.Moving += OnNodeModelMoving;
        model.Locked = !GraphEditState.IsEditing; 
        return model;
    }

    private void OnNodeModelMoving(NodeModel nodeModel)
    {
        var nodeID = nodeMappings.GetGraph(nodeModel.Id).id;
        if (nodeID == null)
            throw new Exception("Node not found");

        var from = GraphLayout.nodeLayout[nodeID].ToPoint();
        var to = nodeModel.Position;
        
        GraphLayout.nodeLayout[nodeID] = LayoutPoint.FromPoint(to);
        GetHistory().Node_Moved(nodeModel, from, to);

        OnHistoryChanged();
    }

    private void OnHistoryChanged()
    {
        GraphEditState.SetHistoryState(GetHistory());
    }

    public List<string> CreateNodes(List<Func<Node>> nodeCreators)
    {
        var pos = new Point(20, 20);
        var nodeIDs = new List<string>(nodeCreators.Count);
                
        foreach (var nodeCreator in nodeCreators)
        {
            var node = nodeCreator();
            Graph.AddNode(node);
            GraphLayout.nodeLayout[node.id] = LayoutPoint.FromPoint(pos);
            AddNode(node, pos);
            pos = pos.Add(20, 0);
            nodeIDs.Add(node.id);
        }

        return nodeIDs;
    }

    private void OnSelectionChanged(SelectableModel? obj)
    {
        var selected = diagram
            .GetSelectedModels()
            .Select(m => new KeyValuePair<SelectableModel,IGraphObject>(m, GetGraphObject(m)))
            .ToList();
        
        GraphEditState.SetSelected(selected);
    }

    public Point GetPosition(Node node)
    {
        return GraphLayout.nodeLayout[node.id].ToPoint();
    }

    private IGraphObject GetGraphObject(SelectableModel selectableModel)
    {
        if (selectableModel is GraphNodeModel gnm)
            return nodeMappings.GetGraph(gnm);
                
        if (selectableModel is LinkModel lm)
            return edgeMappings.GetGraph(lm);
                
        throw new InvalidOperationException();
    }

    public void RenameNode(string originalID, string newID)
    {
        var changedEdges = Graph.edges.Values.Where(e => e.from.nodeID == originalID || e.to.nodeID == originalID).ToList();
        foreach (var changedEdge in changedEdges)
        {
            var edge = changedEdge.Reroute(originalID, newID);
            Graph.edges.Remove(changedEdge.id);
            Graph.edges.Add(edge.id, edge);
        }
        
        //  We keep graph nodes keyed by ID in three places:
        
        //  1. The graph
        //  2. The map between graph nodes and diagram nodes
        //  3. The stored data of diagram nodes (currently just positions)

        var node = Graph.nodes[originalID];
        nodeMappings.Remap(node, newID);
        node.id = newID;
        Graph.nodes.Remove(originalID);
        Graph.nodes[newID] = node;

        GraphLayout.nodeLayout[newID] = GraphLayout.nodeLayout[originalID];
        GraphLayout.nodeLayout.Remove(originalID);

        Reload(node);
    }

    /// Tell a Diagram model object to update itself and load its state from the Graph model.
    
    public void Reload(Node node)
    {
        var nodeModel = nodeMappings.GetDiagram(node.id);
        nodeModel.Load();
        nodeModel.Refresh();
    }

    ///  Callback from the Diagram
    
    private void OnDiagramLinkAdded(BaseLinkModel link)
    {
        if (link.TargetNode is null)
        {
            //  An empty link being dragged (listen for its connection)
            
            link.TargetPortChanged += OnDiagramLinkConnected;
        }
        
    //else
    //In case it was connected instantaneously (via code)
       //     RegisterUndoHistoryAction(new GraphAction.AddLink(link)); 
    }

       
    private void OnDiagramLinkConnected(BaseLinkModel link, PortModel? inPort, PortModel? outPort)
    {
        link.SourcePortChanged -= OnDiagramLinkConnected;
        
        var fromNodeModel = (GraphNodeModel) link.SourceNode;
        var toNodeModel = (GraphNodeModel) link.TargetNode!;
        
        var fromNode = nodeMappings.GetGraph(fromNodeModel);
        var toNode = nodeMappings.GetGraph(toNodeModel);
        
        var fromPin = fromNodeModel.GetPin(link.SourcePort!);
        var toPin = toNodeModel.GetPin(link.TargetPort!);

    // Check the user hasn't just repeated an existing link
        
        var from = new OutputSelector(fromNode.id, fromPin.name);
        var to = new InputSelector(toNode.id, toPin.name);
        var edge = new Edge(from, to);

        if (Graph.edges.ContainsKey(edge.id))
            return;
        
    //  The diagram link has been added by the library, but we need to remove it and then add it 
    //  back to both the diagram and the model in order for the undo/redo logic to be simple.
        
        diagram.Links.Remove(link);
        
        DoAction(new GraphEditAction.AddEdge(edge));       
    }

    private void DoDelete()
    {
        var SelectedItems = diagram.GetSelectedModels().ToList();
        if (SelectedItems.Count > 0)
        {
            var actions = SelectedItems.Select<SelectableModel, GraphEditAction>(selected =>
            {
                switch (selected)
                {
                    case GraphNodeModel gnm:
                        return new GraphEditAction.RemoveNode(nodeMappings.GetGraph(gnm));

                    case LinkModel lm:
                        return new GraphEditAction.RemoveEdge(edgeMappings.GetGraph(lm));

                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }).ToList();

            GraphEditState.DoAction(new GraphEditAction.EditActions(actions));
        }
        OnHistoryChanged();
    }
}
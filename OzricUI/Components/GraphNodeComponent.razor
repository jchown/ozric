@using Blazor.Diagrams.Components.Renderers;
@using OzricEngine.Values
@using OzricUI.Model
@using ValueType = OzricEngine.Values.ValueType

<div class="ozric-node @(Node.Selected ? " selected" : "") ozric-height-@(Node.PortHeight())">
    <div class="ozric-node-icon"><span class="iconify" data-icon="@(Node.Icon)"></span></div>
    <div class="ozric-node-title">@(Node.Title)</div>
    @foreach (var port in Node.Ports.Select(p => p as IPort).Where(p => p != null))
    {
        <div class="@(port.CssClass) port-@(Node.GetPortPosition(port))" hidden="@(port.HiddenIfLocked && Node.Locked)">
            @if (Node.Locked)
            {
                // When locked, we show the live state
                
                <PortRenderer Port="@((PortModel)port)">
                    @if (Node.HasPin((PortModel)port))
                    {
                        var pin = Node.GetPin((PortModel)port);

                        //  Show the live state
                        switch (port.valueType)
                        {
                            case ValueType.Number:
                                break;
                                
                            case ValueType.Binary:
                                var pinValue = ((Binary?)pin.value);
                                if (pinValue?.value ?? false)
                                {
                                    <img src="icons/Binary-true.png" width="16" height="16"/>
                                }
                                else
                                {
                                    <img src="icons/Binary-false.png" width="16" height="16"/>
                                }
                                break;
                                
                            case ValueType.Color:
                                var color = ((ColorValue?)pin.value);
                                if ((color?.brightness ?? 0) == 0)
                                {
                                    <img src="icons/Color-off.png" width="16" height="16"/>
                                }
                                else
                                {
                                    <div style="background: #@(color.ToHexString()); width:16px; height:16px; border-radius: 50%">&nbsp;</div>
                                }
                                break;
                                
                            case ValueType.Mode:
                                <img src="icons/@(port.valueType).png" width="16" height="16"/>
                                <span>@(pin.value)</span>
                                break;
                                
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                    }
                </PortRenderer>
            }
            else
            {
                //  When editing, we just show the type
                
                <PortRenderer Port="@((PortModel)port)">
                    <img src="icons/@(port.valueType).png" width="16" height="16"/>
                </PortRenderer>
            }

        </div>
    }
</div>

@code {
    [Parameter]
    public GraphNodeModel Node { get; set; }
}
@using Blazor.Diagrams.Components.Renderers;
@using OzricEngine.Values
@using OzricUI.Model
@using ValueType = OzricEngine.Values.ValueType

<div class="ozric-node @(Node.Selected ? " selected" : "") ozric-height-@(Node.PortHeight())">
    
    @if (Node.HasAlert)
    {
        <MudBadge Elevation="99" Origin="Origin.TopRight" Color="Node.AlertColor" Icon="@Icons.Material.Filled.Warning" Variant="Variant.Filled" Pill="true" Margin="Margin.Dense"/>
    }
    
    <div class="ozric-node-icon">
        <span class="iconify" data-icon="@(Node.Icon)"></span>
    </div>
    <div class="ozric-node-title">@(Node.Title)</div>

    @foreach (var port in Node.Ports.Select(p => p as IPort).Where(p => p != null))
    {
        <div class="@(port!.CssClass) port-@(Node.GetPortPosition(port))" hidden="@(port.HiddenIfLocked && Node.Locked)">

            @if (Node.Locked)
            {
                // When locked, we show the live state

                <PortRenderer Port="@((PortModel)port)">
                    @if (Node.HasPin((PortModel)port))
                    {
                        var pin = Node.GetPin((PortModel)port);

                        //  Show the live state
                        switch (port.valueType)
                        {
                            case ValueType.Number:
                                var number = ((Number?)pin.value)?.value ?? 0f;
                                <span class="number-value">@(number.ToString("F"))</span>
                                <img src="icons/@(port.valueType).png" width="16" height="16" alt="@(pin.value)"/>
                                break;

                            case ValueType.Binary:
                                var pinValue = ((Binary?)pin.value)?.value ?? false;
                                if (pinValue)
                                {
                                    <img src="icons/Binary-true.png" width="16" height="16" alt="on"/>
                                }
                                else
                                {
                                    <img src="icons/Binary-false.png" width="16" height="16" alt="off"/>
                                }

                                break;

                            case ValueType.Color:
                                var color = (ColorValue?)pin.value ?? ColorValue.OFF;
                                if (color.brightness == 0)
                                {
                                    <img src="icons/Color-off.png" width="16" height="16" alt="off"/>
                                }
                                else
                                {
                                    <div style="background: #@(color.ToHexString()); width:16px; height:16px; border-radius: 50%">&nbsp;</div>
                                }

                                break;

                            case ValueType.Mode:
                                <span>@pin.value</span>
                                <img src="icons/@(port.valueType).png" width="16" height="16" alt="@(pin.value)"/>
                                break;

                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                    }
                </PortRenderer>
            }
            else
            {
                //  When editing, we just show the type

                <PortRenderer Port="@((PortModel)port)">
                    @if (Node.ShowLabel(port))
                    {
                        <span>@port.Name</span>
                    }
                    <img src="icons/@(port.valueType).png" width="16" height="16" alt="@(port.valueType)"/>
                </PortRenderer>
            }
        </div>
    }

</div>

@code {
    [Parameter] public GraphNodeModel Node { get; set; }
}
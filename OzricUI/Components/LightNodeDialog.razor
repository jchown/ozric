@using OzricUI.Model
@using OzricEngine.logic

<MudDialog>
    <DialogContent>

        <MudContainer Style="max-height: 60vh; overflow-y: scroll">

            <MudSelect @bind-Value="ColourSwitchModeValue" Style="z-index:9999;" @bind-Text="ColourSwitchModeText" @onchange="OnColourSwitchModeChanged" HelperText="@ColourSwitchHelperText" T="Light.ColourSwitchMode" Label="Colour Switch Mode" Variant="Variant.Text">
                <MudSelectItem Value="@(Light.ColourSwitchMode.Automatic)"/>
                <MudSelectItem Value="@(Light.ColourSwitchMode.Fast)"/>
                <MudSelectItem Value="@(Light.ColourSwitchMode.TwoPhase)"/>
            </MudSelect>

        </MudContainer>

    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>

</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public LightModel Model { get; set; }

    [Parameter]
    public Light Light { get; set; }

    public Light.ColourSwitchMode ColourSwitchModeValue { get; set; }
    public string ColourSwitchModeText { get; set; }
    public string ColourSwitchHelperText { get; set; }

    void Cancel() => MudDialog.Cancel();

    protected override void OnInitialized()
    {
        ColourSwitchModeValue = Light.colourSwitchMode ?? Light.ColourSwitchMode.Automatic;
        ColourSwitchHelperText = GetColourSwitchHelperText();
    }

    public string GetColourSwitchHelperText()
    {
        switch (ColourSwitchModeValue)
        {
            case Light.ColourSwitchMode.Fast:
            {
                return "Switch colour-space & brightness simultaneously";
            }
            case Light.ColourSwitchMode.TwoPhase:
            {
                return "Don't switch colour-space & brightness simultaneously";
            }
            case Light.ColourSwitchMode.Automatic:
            {
                return $"Automatically choose: Currently {Light.GetColourSwitchMode()}";
            }
        }

        throw new InvalidOperationException();
    }
    
    private string GetColourSwitchModeText()
    {
        switch (ColourSwitchModeValue)
        {
            case Light.ColourSwitchMode.Automatic:
                return "Automatic";

            case Light.ColourSwitchMode.Fast:
                return "Fast";

            case Light.ColourSwitchMode.TwoPhase:
                return "Two Phase";
        }

        throw new InvalidOperationException();
    }

    private void OnColourSwitchModeChanged()
    {
        ColourSwitchHelperText = GetColourSwitchHelperText();
    }

}
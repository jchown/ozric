@using OzricEngine.Values
@using OzricService
@using Boolean = OzricEngine.Values.Binary
@using Size = MudBlazor.Size

<MudGrid>
    <MudItem xs="3">
        <MudNumericField Value="@CurrentScaledValue" TextChanged="@(OnOffsetValueChanged)" Immediate="true" Label="@Label" Min="@Min" Max="@Max"/>
    </MudItem>
    <MudItem xs="6">
        <MudSelect Value="@CurrentScale" T="int" Variant="Variant.Text" ValueChanged="@(OnOffsetScaleChanged)">
            <MudSelectItem Value="1">Seconds</MudSelectItem>
            <MudSelectItem Value="60">Minutes</MudSelectItem>
            <MudSelectItem Value="3600">Hours</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>

@code {
    
    [Parameter]
    public double Value { get; set; }
 
    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public double? Min { get; set; }
 
    [Parameter]
    public double? Max { get; set; }

    public double CurrentValue { get; set; }
    private int CurrentScale { get; set; }
    private double CurrentScaledValue { get; set; }

    public bool Error { get; set; }
    public string? ErrorText { get; set; }

    protected override void OnInitialized()
    {
        CurrentValue = Value;

        if (CurrentValue % 3600 == 0)
            CurrentScale = 3600;
        else if (CurrentValue % 60 == 0)
            CurrentScale = 60;
        else
            CurrentScale = 1;
        
        CurrentScaledValue = CurrentValue / CurrentScale;
    }
    
    private void OnOffsetValueChanged(string s)
    {
        if (Double.TryParse(s, out var v))
        {
            CurrentScaledValue = v;
            CurrentValue = CurrentScaledValue * CurrentScale;
            if (ValueChanged.HasDelegate)
                ValueChanged.InvokeAsync(CurrentValue);
        }
    }

    private void OnOffsetScaleChanged(int seconds)
    {
        CurrentScale = seconds;
        CurrentScaledValue = CurrentValue / CurrentScale;
    }

}
@using OzricEngine.Values
@using OzricService
@using Boolean = OzricEngine.Values.Binary
@using Size = MudBlazor.Size
@inject IDialogService DialogService

@switch (Value)
{
    case Binary:
    {
        <MudBooleanInput T="Boolean" @bind="binary" />
        break;
    }
    case ColorValue c:
    {
        if (c.brightness == 0)
        {
            <div>
                <MudButton Variant="Variant.Filled" Size="Size.Small">Edit</MudButton>
            </div>
            <span>&nbsp;</span>
            <span>Off</span>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="PickColor">
                <span style="background-color: #@(c.ToHexString()); display: inline-block; width: 16px; height: 16px;" class="rounded">&nbsp;</span>
                <span>&nbsp;</span>

            @switch (c)
            {
                case ColorRGB rgb:
                {
                    <span>RGB #@rgb.ToHexString()</span>
                    break;
                }
                case ColorTemp t:
                {
                    <span>@(t.temp) mired</span>
                    break;
                }
                case ColorHS hs:
                {
                    <span>H/S: @(hs.h.ToString("F2"))/@(hs.s.ToString("F2"))</span>
                    break;
                }
                case ColorXY xy:
                {
                    <span>X/Y: @(xy.x.ToString("F2"))/@(xy.y.ToString("F2"))</span>
                    break;
                }
            }
            <span> - </span>
            <span>@(Math.Round(c.brightness * 100).ToString())%</span>
            </MudButton>
        }
        break;
    }
    case Mode:
    {
        <MudTextField T="string" @bind-Text="mode" />
        break;
    }
    case Number:
    {
        <MudNumericField Value="number" />
        break;
    }
}

@code {
    
    [Parameter]
    public Value Value { get; set; }
 
    [Parameter]
    public EventCallback<Value> OnEdited { get; set; }

    public bool binary;
    public float number;
    public string mode;
    public ColorValue color;

    protected override void OnInitialized()
    {
        switch (Value)
        {
            case Binary b:
                binary = b.value;
                break;
                
            case Number s:
                number = s.value;
                break;
                
            case Mode m:
                mode = m.value;
                break;
                
            case ColorValue c:
                color = c;
                break;
        }    
    }

    private async Task PickColor()
    {
        var parameters = new DialogParameters
        {
            { "Value", color }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            CloseButton = true,
            Position = DialogPosition.TopCenter,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var result = await DialogService.Show(typeof(ColorPickerDialog), "Choose Color", parameters, options).Result;
        if (result.Canceled)
            return;

        color = (ColorValue) result.Data;
        await OnEdited.InvokeAsync(color);
        StateHasChanged();
    }

}
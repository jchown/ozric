@page "/graph"

<PageTitle>Graph</PageTitle>

@using OzricUI.Data
@using Blazor.Diagrams.Components
@using OzricEngine.ext
@using OzricEngine.logic
@inject OzricEngineService ozricEngine

<h1>Graph</h1>
    
@if (graph == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="diagram-container">
        <CascadingValue Value="diagram">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </div>
}

@code {
    private OzricEngine.Graph? graph;
    private GraphLayout? graphLayout;
    private Dictionary<string, NodeModel> nodesInDiagram = new();
    private Dictionary<string, LinkModel> edgesInDiagram = new();
    private Diagram? diagram { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    
        graph = await ozricEngine.GetGraphAsync();
        graphLayout = await ozricEngine.GetGraphLayoutAsync();
        
        var options = new DiagramOptions
        {
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            Links = new DiagramLinkOptions
            {
            },
            Zoom = new DiagramZoomOptions
            {
                Minimum = 0.5, // Minimum zoom value
                Inverse = false, // Whether to inverse the direction of the zoom when using the wheel
            }
        };
        
        diagram = new Diagram(options);
        
        PopulateDiagram();
    }
        
    private void PopulateDiagram()
    {
        nodesInDiagram.Clear();
        edgesInDiagram.Clear();

        int x = 0, y = 0, w = 160, h = 120, cols = 8; 
        
        foreach (var node in graph.nodes)
        {
            var diagramNode = NewNode(node.Value, graphLayout.nodeLayout.GetOrSet(node.Key, () =>
            {
                var point = new Point(x * w, y * h);
                if (++x == cols)
                {
                    x = 0;
                    ++y;
                }
                return point;
            }));
            
            nodesInDiagram[node.Key] = diagramNode;
            diagram.Nodes.Add(diagramNode);
        }

        foreach (var edge in graph.edges)
        {
            var fromNodeID = edge.Key;
            var fromOutputs = edge.Value;

            foreach (var fromOutput in fromOutputs.Keys)
            {
                foreach (var toInput in fromOutputs[fromOutput])
                {
                    var fromD = nodesInDiagram[fromNodeID]; 
                    var toD = nodesInDiagram[toInput.nodeID];
                    
                    diagram.Links.Add(new LinkModel(fromD.GetPort(PortAlignment.Right), toD.GetPort(PortAlignment.Left)));
                }
            }
        }
    }

    private NodeModel NewNode(Node node, Point point)
    {
        var nodeModel = new NodeModel(point);
        nodeModel.Title = node.id;
        nodeModel.AddPort(PortAlignment.Bottom);
        nodeModel.AddPort(PortAlignment.Top);
        nodeModel.AddPort(PortAlignment.Left);
        nodeModel.AddPort(PortAlignment.Right);
        return nodeModel;
    }
}

@page "/graph"

<PageTitle>Graph</PageTitle>

@using OzricUI.Data
@using Blazor.Diagrams.Components
@using OzricEngine
@using OzricEngine.ext
@using OzricEngine.logic
@inject OzricEngineService ozricEngine

<div class="top-row px-2 py-2">

    <MatButton Icon="edit" Raised="true" @onclick="OnClickEdit" Disabled="@IsEditing" hidden="@IsEditing">
        Edit
    </MatButton>

    <MatButton Icon="cancel" Raised="true" @onclick="OnClickCancel" Disabled="@IsNotEditing" hidden="@IsNotEditing">
        Cancel
    </MatButton>

    <MatButton Icon="save" Raised="true" @onclick="OnClickSave" Disabled="@IsChanged" hidden="@IsNotEditing">
        Save
    </MatButton>

    <MatButton Icon="undo" Raised="true" @onclick="OnClickUndo" Disabled="@CanUndo" hidden="@IsNotEditing">
        Undo
    </MatButton>

    <MatButton Icon="redo" Raised="true" @onclick="OnClickRedo" Disabled="@CanRedo" hidden="@IsNotEditing">
        Redo
    </MatButton>
    
</div>


@if (graph == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="diagram-container">
        <CascadingValue Value="diagram">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </div>
}

@code {

    enum EditMode
    {
        View, EditOffline, EditOnline
    }
    
    enum OnlineMode
    {
        Realtime, Simulated
    }

    private EditMode mode = EditMode.View;
    
    private bool IsEditing => mode != EditMode.View;
    private bool IsNotEditing => mode == EditMode.View;
    private bool IsChanged => (graph != null && !graph.Equals(editGraph)) || (graphLayout != null && !graphLayout.Equals(editGraphLayout));
    private bool CanUndo => history?.CanUndo() ?? false;
    private bool CanRedo => history?.CanRedo() ?? false;

    private OzricEngine.Graph? graph;
    private GraphLayout? graphLayout;
    
    private OzricEngine.Graph? editGraph;
    private GraphLayout? editGraphLayout;
    
    private Dictionary<string, NodeModel> graphNodeIDsToDiagramNodes = new();
    private Dictionary<string, string> diagramNodeIDsToGraphIDs = new();
    private Dictionary<string, LinkModel> edgesInDiagram = new();
    private Diagram? diagram { get; set; }
    private DiagramHistory? history;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    
        graph = await ozricEngine.GetGraphAsync();
        graphLayout = await ozricEngine.GetGraphLayoutAsync();
        
        var options = new DiagramOptions
        {
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            Links = new DiagramLinkOptions
            {
            },
            Zoom = new DiagramZoomOptions
            {
                Minimum = 0.5, // Minimum zoom value
                Inverse = false, // Whether to inverse the direction of the zoom when using the wheel
            }
        };
        
        diagram = new Diagram(options);
        
        PopulateDiagram();
        
        history = new DiagramHistory(diagram);
    }

    private void OnClickEdit()
    {
        mode = EditMode.EditOffline;

        editGraph = Json.Clone(graph);
        editGraphLayout = Json.Clone(graphLayout);

        SetLocked(false);
    }

    private async Task OnClickSave()
    {
        if (graphLayout != null && !graphLayout.Equals(editGraphLayout))
        {
            await ozricEngine.SetGraphLayoutAsync(editGraphLayout);
            graphLayout = editGraphLayout;
            editGraphLayout = null;
        }

        mode = EditMode.EditOffline;
    }

    private void OnClickCancel()
    {
        mode = EditMode.View;
        graph = editGraph;
        graphLayout = editGraphLayout;
        editGraph = null;
        editGraphLayout = null;
        
        PopulateDiagram();
    }

    private void OnClickUndo()
    {
        history?.UndoLastAction();
    }

    private void OnClickRedo()
    {
        history?.RedoLastAction();
    }
        
    private void PopulateDiagram()
    {
        graphNodeIDsToDiagramNodes.Clear();
        diagramNodeIDsToGraphIDs.Clear();
        edgesInDiagram.Clear();

        int x = 0, y = 0, w = 160, h = 120, cols = 6; 
        
        foreach (var node in graph.nodes)
        {
            var diagramNode = NewNode(node.Value, graphLayout.nodeLayout.GetOrSet(node.Key, () =>
            {
                var point = new Point(x * w, y * h);
                if (++x == cols)
                {
                    x = 0;
                    ++y;
                }
                return point;
            }));
            
            graphNodeIDsToDiagramNodes[node.Key] = diagramNode;
            diagramNodeIDsToGraphIDs[diagramNode.Id] = node.Value.id;
            diagram.Nodes.Add(diagramNode);
        }

        foreach (var edge in graph.edges)
        {
            var fromNodeID = edge.Key;
            var fromOutputs = edge.Value;

            foreach (var fromOutput in fromOutputs.Keys)
            {
                foreach (var toInput in fromOutputs[fromOutput])
                {
                    var fromD = graphNodeIDsToDiagramNodes[fromNodeID]; 
                    var toD = graphNodeIDsToDiagramNodes[toInput.nodeID];

                    var link = new LinkModel(fromD.GetPort(PortAlignment.Right), toD.GetPort(PortAlignment.Left));
                    link.Locked = IsNotEditing; 
                    diagram.Links.Add(link);
                }
            }
        }
    }

    private NodeModel NewNode(Node node, Point point)
    {
        var nodeModel = new NodeModel(point);
        nodeModel.Title = node.id;
        nodeModel.AddPort(PortAlignment.Bottom);
        nodeModel.AddPort(PortAlignment.Top);
        nodeModel.AddPort(PortAlignment.Left);
        nodeModel.AddPort(PortAlignment.Right);
        nodeModel.Moving += OnNodeModelMoving;
        nodeModel.Locked = IsNotEditing; 
        return nodeModel;
    }

    private void OnNodeModelMoving(NodeModel nodeModel)
    {
        var nodeID = diagramNodeIDsToGraphIDs[nodeModel.Id];
        if (nodeID == null)
            throw new Exception("Node not found");

        editGraphLayout.nodeLayout[nodeID] = nodeModel.Position;
    }
    
    private void SetLocked(bool locked)
    {
        foreach (var node in diagram.Nodes)
            node.Locked = locked;
        
        foreach (var link in diagram.Nodes)
            link.Locked = locked;
    }

}

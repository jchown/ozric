@page "/graph"

<PageTitle>Graph</PageTitle>

@using OzricUI.Data
@using Blazor.Diagrams.Components
@inject OzricEngineService ozricEngine

<h1>Graph</h1>

<div class="diagram-container">
    <CascadingValue Value="diagram">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>
    
@if (graph == null)
{
    <p><em>Loading...</em></p>
}
else
{
   <ul>
    @foreach (var node in graph.nodes)
    {
        <li>@node.Value.id</li>
    }
    </ul>
    <pre>
        @graph.edges.Count edges loaded
    </pre>
}

@code {
    private OzricEngine.Graph? graph;
    private Diagram? diagram { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        var options = new DiagramOptions
        {
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            Links = new DiagramLinkOptions
            {
            },
            Zoom = new DiagramZoomOptions
            {
                Minimum = 0.5, // Minimum zoom value
                Inverse = false, // Whether to inverse the direction of the zoom when using the wheel
            }
        };
        
        diagram = new Diagram(options);
        
        Setup();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    
        graph = await ozricEngine.GetGraphAsync();
    }
        
    private void Setup()
    {
        var node1 = NewNode(50, 50);
        var node2 = NewNode(300, 300);
        var node3 = NewNode(300, 50);
        diagram.Nodes.Add(new [] { node1, node2, node3 });
        diagram.Links.Add(new LinkModel(node1.GetPort(PortAlignment.Right), node2.GetPort(PortAlignment.Left)));
    }

    private NodeModel NewNode(double x, double y)
    {
        var node = new NodeModel(new Point(x, y));
        node.AddPort(PortAlignment.Bottom);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Left);
        node.AddPort(PortAlignment.Right);
        return node;
    }
}

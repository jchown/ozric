@using OzricUI.Data
@using OzricEngine
@using OzricEngine.Nodes
@using OzricEngine.Values
@using OzricService
@using OzricUI.Components
@using OzricUI.Model
@using Size = MudBlazor.Size
@using Edge = MudBlazor.Edge
@using Blazor.Diagrams.Core.Models.Base
@using Microsoft.AspNetCore.SignalR.Client
@using OzricUI.Hubs
@inject IDialogService DialogService
@inherits LayoutComponentBase
@inject DataService Data
@inject IOzricService OzricService
@inject NavigationManager Navigation

@* Why is this needed? If I remove it, we get no HHC events *@
@inject HomeHubController HHC

<MudDialogProvider/>
<MudSnackbarProvider/>
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((_) => DrawerToggle())" />
        
        <MudText>Ozric</MudText>
        
        &nbsp; &nbsp;
        
        <MudIconButton Icon="@Icons.Material.Filled.PauseCircle" Variant="Variant.Filled" Color="Color.Primary" @onclick="OnClickPause" Disabled="@(IsEditing || OzricService.Status.paused)" />
        <MudIconButton Icon="@Icons.Material.Filled.PlayCircle" Variant="Variant.Filled" Color="Color.Primary" @onclick="OnClickContinue" Disabled="@(IsEditing || !OzricService.Status.paused)" />
 
        <MudSpacer />

        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" @onclick="OnClickAdd" Disabled="@(!IsEditing)" hidden="@(!IsEditing)">
            Add
        </MudButton>

        <MudButton StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" @onclick="OnClickDelete" Disabled="@(!HasSelection)" hidden="@(!IsEditing)">
            Delete
        </MudButton>

        <MudButton StartIcon="@Icons.Material.Filled.Info" Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnClickInfo" Disabled="@(!CanGetInfo)">
            Info
        </MudButton>

        <MudSpacer />
        
        <MudButton StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnClickEdit" Disabled="@IsEditing" Hidden="@IsEditing">
            Edit
        </MudButton>
        
        <MudButton StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Primary" @onclick="OnClickDone" Disabled="@(Saving || !IsEditing)" hidden="@(!IsEditing)"> 
            Done
        </MudButton>
               
        <MudButton Color="Color.Tertiary" Variant="Variant.Filled"  @onclick="OnClickSave" Disabled="@(Saving || !IsChanged)" hidden="@(!IsEditing)">
            @if (Saving)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Saving</MudText>
            }
            else
            {
                <MudIcon Variant="Variant.Filled" Icon="@Icons.Material.Filled.Save" />
                <MudText>Save</MudText>
            }
        </MudButton>

        <MudTooltip Text="Undo" Arrow="true" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Material.Filled.Undo" Variant="Variant.Filled" Color="Color.Primary" @onclick="OnClickUndo" Disabled="@(!CanUndo)" hidden="@(!IsEditing)" />
        </MudTooltip>
        
        <MudTooltip Text="Redo" Arrow="true" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Material.Filled.Redo" Variant="Variant.Filled" Color="Color.Primary" @onclick="OnClickRedo" Disabled="@(!CanRedo)" hidden="@(!IsEditing)" />
        </MudTooltip>
        
    </MudAppBar>
    
    <MudDrawer @bind-Open="@_settingsDrawerOpen">
        <NavMenu/>
    </MudDrawer>
    
    <MudMainContent>
        
        <div style="height: 100%">
            @if (Graph == null || GraphLayout == null)
            {
                <MudPaper Class="pa-16 ma-2" Outlined="true">
                    <MudText>Loading...&#160;&#160;&#160;<MudProgressCircular Size="Size.Small" Indeterminate="true"/></MudText>
                </MudPaper>
            }
            else
            {
                <GraphEditor Graph="@Graph" GraphLayout="@GraphLayout" GraphEditState="@GraphEditState" />
            }
        </div>
    </MudMainContent>

</MudLayout>

@code {
    bool _settingsDrawerOpen = true;
    private bool _isDarkMode;
    private MudThemeProvider? _mudThemeProvider;

    private Graph Graph { get; set; }
    private GraphLayout GraphLayout { get; set; }
    private GraphEditState GraphEditState { get; set; } = new();
    private List<KeyValuePair<SelectableModel, IGraphObject>> SelectedItems { get; set; } = new();
    private HubConnection? hubConnection;
    
    private bool Saving => GraphEditState.Mode == GraphEditState.EditMode.Saving;
    private bool HasSelection => (SelectedItems.Count > 0);
    private bool CanGetInfo => SelectedItems.Count == 1 && SelectedItems[0].Key is GraphNodeModel;

    public bool IsEditing => GraphEditState.IsEditing;
    public bool IsChanged => GraphEditState.IsChanged;
    public bool CanUndo => GraphEditState.CanUndo && !Saving;
    public bool CanRedo => GraphEditState.CanRedo && !Saving;

    void DrawerToggle()
    {
        _settingsDrawerOpen = !_settingsDrawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var task = _mudThemeProvider?.GetSystemPreference();
            var dark = (task != null) && await task;
            _isDarkMode = false && dark;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadGraph();
        
        hubConnection = new HubConnectionBuilder()
            .WithAutomaticReconnect()
            .WithUrl(Navigation.ToAbsoluteUri(HomeHub.ENDPOINT))
            .AddJsonProtocol(json => Json.Configure(json.PayloadSerializerOptions))
            // .ConfigureLogging(logging =>
            // {
            //     logging.AddConsole();
            //     logging.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace);
            // })
            .Build();

        hubConnection.On<Value>(HomeHub.TEST_MESSAGE, (v) =>
        {
            Console.WriteLine("Value: {0}", v);
        });
        
        hubConnection.On<string>(HomeHub.HEARTBEAT_MESSAGE, (m) =>
        {
        });

        hubConnection.On<EventStateChanged>(HomeHub.ENTITY_STATE_CHANGED_MESSAGE, (esc) =>
        {
            InvokeAsync(() =>
            {
                OzricService.Home.OnEventStateChanged(esc);
                if (GraphEditState.IsLocked())
                    GraphEditState.RefreshEntity(esc.data.new_state.entity_id);
                
                StateHasChanged();
            });
        });
        
        hubConnection.On<string,string,string>(HomeHub.PIN_CHANGED_MESSAGE, (nodeID, pinName, value) =>
        {
            InvokeAsync(() =>
            {
                GraphEditState.PinChanged(nodeID, pinName, Json.Deserialize<Value>(value));
                StateHasChanged();
            });
        });
        
        await hubConnection.StartAsync();
    }

    private async Task LoadGraph()
    {
        Graph = Json.Clone(OzricService.Graph);    // Don't edit the live graph!
        GraphLayout = await Data.GetGraphLayoutAsync();
        GraphEditState.OnChanged += OnGraphEditStateChanged;
        GraphEditState.OnSelectionChanged += GraphSelectionChanged;
        GraphEditState.OnKeyDown += OnDiagramKeyDown;
    }

    private void UnloadGraph()
    {
        GraphEditState.OnChanged -= OnGraphEditStateChanged;
        Graph = new Graph();
        GraphLayout = new GraphLayout();
        GraphEditState = new GraphEditState();
    }

    private void OnGraphEditStateChanged()
    {
        if (GraphEditState.IsEditing && !OzricService.Status.paused)
            OzricService.SetPaused(true);
            
        if (!GraphEditState.IsEditing && OzricService.Status.paused)
            OzricService.SetPaused(false);

        StateHasChanged();
    }

    private void OnClickEdit()
    {
        GraphEditState.OnEdit();
    }

    private void OnClickDone()
    {
        if (!GraphEditState.IsChanged)
        {
            GraphEditState.OnCancel();
            return;
        }

    //  Tear down and rebuild. It would be nice to do something less brutal.

        UnloadGraph();

        _ = Task.Run(async () =>
        {
            await LoadGraph();
            await InvokeAsync(StateHasChanged);
        });
    }

    private void OnClickSave()
    {
        if (GraphLayout == null)
            throw new Exception();

        GraphEditState.OnSaving();
        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(100);
                await OzricService.Restart(Graph);
                await Data.SetGraphLayoutAsync(GraphLayout);
                await InvokeAsync(() => GraphEditState.DoCommand(GraphEditState.Command.SetCheckpoint));
            }
            catch (Exception e)
            {
                Console.Error.WriteLine(e.ToString());
            }
            finally
            {
                await InvokeAsync(() => GraphEditState.OnEdit());
            }
        });
    }

    private void OnClickUndo()
    {
        GraphEditState.DoCommand(GraphEditState.Command.Undo);
    }

    private void OnClickRedo()
    {
        GraphEditState.DoCommand(GraphEditState.Command.Redo);
    }

    private async Task OnClickPause()
    {
        OzricService.SetPaused(true);
    }

    private async Task OnClickContinue()
    {
        OzricService.SetPaused(false);
    }

    private async Task OnClickAdd()
    {
        var parameters = new DialogParameters
        {
            { "Choices", AddNodeChoice.GetChoices(OzricService.Home, Graph) },
            { "OnAdd", AddNode }
        };

        await DialogService.Show<AddNodesDialog>("Add Nodes", parameters, GetDialogOptions()).Result;
    }

    private void AddNode(Node node)
    {
        GraphEditState.DoAction(new GraphEditAction.AddNode(node));
    }

    private void GraphSelectionChanged(List<KeyValuePair<SelectableModel, IGraphObject>> items)
    {
        SelectedItems = items;
        StateHasChanged();
    }

    record ModelDialog(Type modelType, Type dialogType, string dialogTitle);

    private ModelDialog[] _dialogTypes = 
    {
        new(typeof(LightModel), typeof(LightDialog), "Light"),
        new(typeof(ModeMatchModel), typeof(ModeMatchDialog), "Mode Match"),
        new(typeof(ModeSwitchModel), typeof(ModeSwitchDialog), "Mode Switch"),
        new(typeof(ConstantColorModel), typeof(ColorConstantDialog), "Color"),
        new(typeof(EntityModel), typeof(EntityDialog), "Entity"),
        new(typeof(GraphNodeModel), typeof(NodeDialog), "Node"),
    };

    private async Task OnClickInfo()
    {
        if (SelectedItems.Count != 1)
            return;

        var (model, node) = SelectedItems[0];
        if (model is not GraphNodeModel)
            return;
        
        var modelType = model.GetType();
        var dialog = _dialogTypes.First(d => modelType.IsAssignableTo(d.modelType));
        await ShowNodeDialog(model, node, dialog);
    }

    private async Task ShowNodeDialog(SelectableModel model, IGraphObject node, ModelDialog dialog)
    {
        var parameters = new DialogParameters
        {
            { "Model", model },
            { "Node", node },
            { "Ozric", OzricService }
        };

        var options = GetDialogOptions();

        var result = await DialogService.Show(dialog.dialogType, dialog.dialogTitle, parameters, options).Result;
        if (result.Cancelled)
            return;

        var changes = (List<GraphEditAction>)result.Data;
        if (changes.Count == 0)
            return;

        if (GraphEditState.Mode == GraphEditState.EditMode.View)
            GraphEditState.OnEdit();

        GraphEditState.DoAction(new GraphEditAction.EditActions(changes));
        StateHasChanged();
    }

    private static DialogOptions GetDialogOptions()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            CloseButton = true,
            Position = DialogPosition.TopCenter,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        return options;
    }

    private static bool IsClass<T>(Type baseClass)
    {
        return baseClass == typeof(T) || baseClass.IsSubclassOf(typeof(T));
    }

    private Task OnClickDelete()
    {
        GraphEditState.DoCommand(GraphEditState.Command.Delete);        
        return Task.CompletedTask;
    }

    private void OnDiagramKeyDown(KeyboardEventArgs e)
    {
        if (e.CtrlKey && e.Key.Equals("z"))
        {
            GraphEditState.DoCommand(GraphEditState.Command.Undo);
        }
        else if (e.CtrlKey && e.Key.Equals("y"))
        {
            GraphEditState.DoCommand(GraphEditState.Command.Redo);
        }
        else if (e.Key == "Delete")
        {
            GraphEditState.DoCommand(GraphEditState.Command.Delete);
        }
    }
}
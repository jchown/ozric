@using OzricUI.Data
@using OzricEngine
@using OzricUI.Components 
@using Size = MudBlazor.Size
@inherits LayoutComponentBase
@inject OzricEngineService ozricEngine

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((_) => DrawerToggle())" />
        
        <MudText>Ozric</MudText>
        
        <MudSpacer></MudSpacer>
        
        <MudButton StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnClickEdit" Disabled="@IsEditing" Hidden="@IsEditing">
            Edit
        </MudButton>
        
        <MudButton StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Primary" @onclick="OnClickCancel" Disabled="@(!IsEditing)" hidden="@(!IsEditing)">
            Cancel
        </MudButton>

        <MudButton StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Tertiary" @onclick="OnClickSave" Disabled="@(!IsChanged)" hidden="@(!IsEditing)">
            Save
        </MudButton>

        <MudButton StartIcon="@Icons.Material.Filled.Undo" Variant="Variant.Filled" Color="Color.Primary" @onclick="OnClickUndo" Disabled="@(!CanUndo)" hidden="@(!IsEditing)">
            Undo
        </MudButton>

        <MudButton StartIcon="@Icons.Material.Filled.Redo" Variant="Variant.Filled" Color="Color.Primary" @onclick="OnClickRedo" Disabled="@(!CanRedo)" hidden="@(!IsEditing)">
            Redo
        </MudButton>

    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        
        <div style="height: 100%">
        @if (Graph == null || GraphLayout == null)
        {
            <MudPaper Class="pa-16 ma-2" Outlined="true">
                <MudText>Loading...&#160;&#160;&#160;<MudProgressCircular Size="Size.Small" Indeterminate="true"/></MudText>
            </MudPaper>
        }
        else
        {
            <GraphEditor graph="@Graph" graphLayout="@GraphLayout" GraphEditState="@GraphEditState" />
        }
        </div>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;
    
    private Graph? Graph { get; set; }
    private GraphLayout? GraphLayout { get; set; }
    private GraphEditState GraphEditState { get; set; } = new GraphEditState();

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = false;//await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Graph = await ozricEngine.GetGraphAsync();
        GraphLayout = await ozricEngine.GetGraphLayoutAsync();
        GraphEditState.OnChanged += OnGraphEditStateChanged;
    }

    private void OnGraphEditStateChanged()
    {
        StateHasChanged();
    }

    private void OnClickEdit()
    {
        GraphEditState.OnEdit();
    }

    private void OnClickCancel()
    {
        GraphEditState.OnCancel();
    }

    private void OnClickSave()
    {
    }

    private void OnClickUndo()
    {
        GraphEditState.DoUndo();
    }

    private void OnClickRedo()
    {
        GraphEditState.DoRedo();
    }

    public bool IsEditing => GraphEditState.IsEditing;
    public bool IsChanged => GraphEditState.IsChanged;
    public bool CanUndo => GraphEditState.CanUndo;
    public bool CanRedo => GraphEditState.CanRedo;
}